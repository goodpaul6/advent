use array("str") as astr
use array("int") as aint

func split_by_char(input: str, ch: int): astr {
    // Necessary because mutating arguments doesn't work haha
    s := input
    parts := astr()

    while true {
        end_of_part_pos := strchr(s, ch)
        part := substr(s, 0, end_of_part_pos)

        astr_push(parts, part)

        if end_of_part_pos == -1 {
            break
        }
        
        s = substr(s, end_of_part_pos + 1, -1)
    }

    return parts
}

data := read_file("inputs/day3.txt")

func is_digit(ch: int): bool {
    return ch >= '0' && ch <= '9'
}

func is_digit_str(s: str): bool {
    for i := 0; i < s->strlen(); i += 1 {
        if !is_digit(s[i]) return false
    }

    return true
}

func scan_for_muls(inp: str): int {
    sum := 0
    valid_count := 0
    mul_count := 0
    mul_enabled := true

    for i := 0; i < inp->strlen() - 4; i += 1 {
        ss := substr(inp, i, i + 4)
        
        if ss != "mul(" {
            if ss == "do()" {
                mul_enabled = true
            }

            if i < inp->strlen() - 7 && substr(inp, i, i + 7) == "don't()" {
                mul_enabled = false
            }
            continue
        }
    
        mul_count += 1

        // Scan forward till the close paren, if any
        paren_idx := -1

        for j := i + 5; j < inp->strlen(); j += 1 { 
            if inp[j] == ')' {
                paren_idx = j
                break
            }
        } 

        if paren_idx < 0 {
            continue
        }

        mul_args_str := substr(inp, i + 4, paren_idx)

        parts := split_by_char(mul_args_str, ',')
    
        if parts->astr_len() != 2 {
            continue
        }

        printf("parts=%q\n", parts)

        mul_result := 1
        valid := true

        for j := 0; j < parts->astr_len(); j += 1 {
            if !is_digit_str(parts[j]) {
                valid = false
                break 
            }

            value := stoi(parts[j], 10)
            mul_result *= value
        }
        
        if valid && mul_enabled {
            sum += mul_result
        }
    }

    printf("mul_count=%q\nvalid_count=%q\n", mul_count, valid_count)

    return sum
}

printf("%q\n", scan_for_muls(data))
