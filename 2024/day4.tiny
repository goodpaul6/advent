use import("util.tiny")

use array("bool") as abool

func count_xmas(rows: astr, visited: abool, x: int, y: int, dx: int, dy: int, cur_char: int): int {
    if x < 0 || y < 0 {
        return 0
    }

    w := rows[0]->strlen()
    h := rows->astr_len()

    // Out of bounds
    if y >= h || x >= w {
        return 0
    }

    if visited[x + y * w] {
        return 0
    }

    ch := rows[y][x]

    if ch != cur_char {
        return 0
    }

    if ch == 'S' {
        return 1
    }

    next_char := if ch == 'X' 'M' else 
                 if ch == 'M' 'A' else
                 if ch == 'A' 'S' else 0

    total_count := 0

    total_count += count_xmas(rows, visited, x + dx, y + dy, dx, dy, next_char)

    return total_count
}

func count_cross_mas(rows: astr, x: int, y: int): int {
    if x < 0 || y < 0 {
        return 0
    }

    w := rows[0]->strlen()
    h := rows->astr_len()

    // Out of bounds
    if y >= h || x >= w {
        return 0
    }

    // Need at least 3 rows
    if y < 2 || y > h - 3 {
        return 0
    }

    // Need at least 3 cols
    if x < 2 || x > w - 3 {
        return 0
    }

    if rows[y][x] == 'A' &&
       rows[y-1][x-1] == 'M' &&
       rows[y-1][x+1] == 'S' &&
       rows[y+1][x-1] == 'A' &&
       rows[y+1][x+1] == 'S' {
        return 1 
    }

    return 0
}

data := read_file("inputs/day4.txt")

rows := split_by_char(data, '\n')

// Drop empty line at the end
astr_pop(rows)

w := rows[0]->strlen()
h := rows->astr_len()

// HACK(Apaar): Turns out this is not needed since characters can be reused
visited := abool()

abool_resize_fill(visited, w * h, false)

xmas_count := 0
cross_mas_count := 0

for y := 0; y < h; y += 1 {
    for x := 0; x < w; x += 1 {
        // xmas_count += count_xmas(rows, visited, x, y, 0, 1, 'X')
        // xmas_count += count_xmas(rows, visited, x, y, 1, 0, 'X')
        // xmas_count += count_xmas(rows, visited, x, y, -1, 0, 'X')
        // xmas_count += count_xmas(rows, visited, x, y, 0, -1, 'X')

        // xmas_count += count_xmas(rows, visited, x, y, 1, 1, 'X')
        // xmas_count += count_xmas(rows, visited, x, y, 1, -1, 'X')
        // xmas_count += count_xmas(rows, visited, x, y, -1, 1, 'X')
        // xmas_count += count_xmas(rows, visited, x, y, -1, -1, 'X')
        cross_mas_count += count_cross_mas(rows, x, y)
    }
}

printf("cross_mas_count=%q\n", cross_mas_count)
