use array("str") as astr
use array("int") as aint

data := read_file("inputs/day1.txt")

func split_by_char(input: str, ch: int): astr {
    // Necessary because mutating arguments doesn't work haha
    s := input
    parts := astr()

    while true {
        end_of_part_pos := strchr(s, ch)
        part := substr(s, 0, end_of_part_pos)

        astr_push(parts, part)

        if end_of_part_pos == -1 {
            break
        }
        
        s = substr(s, end_of_part_pos + 1, -1)
    }

    return parts
}

// Returns dict of stringified ints to frequency of that integer
func counters(nums: aint): dict {
    freq := dict()

    for i := 0; i < aint_len(nums); i += 1 {
        num := nums[i]
        num_str := int_to_str(num)

        prev_freq := freq[num_str]

        if prev_freq == null {
            prev_freq = 0
        }

        // NOTE(Apaar): If "any" is supposed to be like "unknown" in TypeScript, why does this even work?
        // It should yell at me that I shouldn't be able to increment an any
        prev_freq += 1

        freq[num_str] = prev_freq    
    }

    return freq
}

lines := split_by_char(data, '\n')
left_numbers := aint()
right_numbers := aint()

for i := 0; i < astr_len(lines); i += 1 {
    nums := split_by_char(astr_get(lines, i), ' ')  

    aint_push(left_numbers, str_to_int(astr_get(nums, 0)))
    aint_push(right_numbers, str_to_int(astr_get(nums, 1)))
}

aint_sort(left_numbers)
aint_sort(right_numbers)

dist_sum := 0

for i = 0; i < aint_len(left_numbers); i += 1 {
    dist := left_numbers[i] - right_numbers[i]

    if dist < 0 {
        dist *= -1
    }

    dist_sum += dist
}

right_counters := counters(right_numbers)

score := 0

for i = 0; i < aint_len(left_numbers); i += 1 {
    num := left_numbers[i]
    num_str := int_to_str(num)

    freq := right_counters[num_str]

    if freq == null {
        freq = 0
    }

    score += num * cast(freq, int)
}

printf("%q\n", score)