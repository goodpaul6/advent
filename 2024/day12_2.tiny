use import("util.tiny")

data := read_file("inputs/day12.txt")

lines := split_by_char(data, '\n')
lines->astr_pop()

w := lines[0]->strlen()
h := lines->astr_len()

// Flood fill
func fill_region(lines: astr, w: int, h: int, x: int, y: int, init_ch: int, region: int, dest: aint, level: int) {
    if x < 0 || x >= w {
        return;
    }

    if y < 0 || y >= h {
        return;
    }

    // Already assigned
    if dest[x + y * w] > 0 {
        return;
    }

    if lines[y][x] != init_ch {
        return;
    }

    dest[x + y * w] = region

    fill_region(lines, w, h, x - 1, y, init_ch, region, dest, level + 1)
    fill_region(lines, w, h, x + 1, y, init_ch, region, dest, level + 1)
    fill_region(lines, w, h, x, y - 1, init_ch, region, dest, level + 1)
    fill_region(lines, w, h, x, y + 1, init_ch, region, dest, level + 1)
}

// Identify by region number rather than by plant
func make_regions(): aint {
    regs := aint()
    regs->aint_resize_fill(w * h, 0)

    rc := 1

    foreach row, y in lines {
        foreach val, x in row {
            if regs[x + y * w] != 0 {
                continue
            }

            fill_region(lines, w, h, x, y, val, rc, regs, 0)
            rc += 1
        }
    }

    return regs
}

func d_add_one(d: dict, key: int) {
    prev := d[key]
    
    if prev == null {
        prev = 0
    }

    prev += 1
    d->dict_put(key, prev)
}

func area(rows: aint, w: int, h: int): dict {
    d := dict()

    for y := 0; y < h; y += 1 {
        for x := 0; x < w; x += 1 {
            val := rows[x + y * w]

            d->d_add_one(val)
        }
    }

    return d
}

func gr_get(rows: aint, w: int, h: int, x: int, y: int): int {
    if x < 0 || x >= w {
        return -1
    }

    if y < 0 || y >= h {
        return -1
    }

    return rows[x + y * w]
}

func gr_get_default(rows: aint, w: int, h: int, x: int, y: int, def: int): int {
    if x < 0 || x >= w {
        return def
    }

    if y < 0 || y >= h {
        return def
    }

    return rows[x + y * w]
}


func trace_recurse(ol: aint, ww: int, hh: int, xx: int, yy: int, dx: int, dy: int, vis: aint): int {
    // No sides here (or we already counted)
    if xx < 0 || xx >= ww {
        return 0
    }

    if yy < 0 || yy >= hh {
        return 0
    }

    if vis[xx + yy * ww] == 1 {
        return 0
    }

    vis[xx + yy * ww] = 1
    
    // At least 1 turn?? I guess
    turns := 1

    // Keep going until we have to turn
    while ol->gr_get(ww, hh, xx + dx, yy + dy) == 1 &&
          vis->gr_get(ww, hh, xx + dx, yy + dy) == 0 {
        xx += dx
        yy += dy    
    }

    if dx == 1 && dy == 0 {
        // Add how many turns would happen if we went downwards (cw) or upwards (counter_cw)
        turns += trace_recurse(ol, ww, hh, xx, yy, 0, 1, vis)
        turns += trace_recurse(ol, ww, hh, xx, yy, 0, -1, vis)
    } else if dx == 0 && dy == 1 {
        turns += trace_recurse(ol, ww, hh, xx, yy, 1, 0, vis)
        turns += trace_recurse(ol, ww, hh, xx, yy, -1, 0, vis)
    } else if dx == -1 && dy == 0 {
        turns += trace_recurse(ol, ww, hh, xx, yy, 0, -1, vis)
        turns += trace_recurse(ol, ww, hh, xx, yy, 0, 1, vis)
    } else {
        // We're going upwards, so go left or right

        turns += trace_recurse(ol, ww, hh, xx, yy, 1, 0, vis)
        turns += trace_recurse(ol, ww, hh, xx, yy, -1, 0, vis)
    }
    
    return turns
}

// Call repeatedly until it returns zero and add the results
func trace_one_outline_sides(ol: aint, ww: int, hh: int): int {
    start_xx := -1
    start_yy := -1

    // Find start pos
    for yy := 0; yy < hh; yy += 1 {
        for xx := 0; xx < ww; xx += 1 {
            if ol[xx + yy * ww] > 0 {
                start_xx = xx
                start_yy = yy
                // TODO(Apaar): Break multiple levels
                break
            }
        }
        
        if start_xx >= 0 {
            break
        }
    }

    if start_xx == -1 && start_yy == -1 {
        // No outline left, we've traced all of it
        return 0
    }

    vis := aint()
    vis->aint_resize_fill(ww * hh, 0)

    // printf("start_pos=%q %q\n", start_xx, start_yy)
    sides := trace_recurse(ol, ww, hh, start_xx, start_yy, 1, 0, vis)

    // Clear outline where visited
    for y := 0; y < hh; y += 1 {
        for x := 0; x < ww; x += 1 {
            if vis[x + y * ww] == 1 {
                ol[x + y * ww] = 0
            }
        }
    }
    
    printf("after a trace (sides=%q):\n", sides)
    print_aint_grid_single_digit(ol, ww, hh)

    return sides
}

func sides(rows: aint, w: int, h: int, area_d: dict): dict {
    d := dict()

    foreach area_ch_raw in area_d->dict_keys() {
        rch := cast(area_ch_raw, int)
        area_ch := rch

        // printf("region=%i\n", rch)
        // print_aint_grid(rows, w, h)

        sides := 0

        for y := 0; y < h; y += 1 {
            for x := 0; x < w; x += 1 {
                ch := rows[x + y * w]

                if ch != rch {
                    continue
                }

                // Inside edge?

                // Bottom left
                if rows->gr_get_default(w, h, x - 1, y + 1, rch) != rch &&
                   rows->gr_get(w, h, x - 1, y) == rch &&
                   rows->gr_get(w, h, x, y + 1) == rch {
                    // printf("%q %q bottom left inside edge\n", x, y)
                    sides += 1
                }

                // Bottom right
                if rows->gr_get_default(w, h, x + 1, y + 1, rch) != rch &&
                   rows->gr_get(w, h, x + 1, y) == rch &&
                   rows->gr_get(w, h, x, y + 1) == rch {
                    // printf("%q %q bottom right inside edge\n", x, y)
                    sides += 1
                }

                // Top left
                if rows->gr_get_default(w, h, x - 1, y - 1, rch) != rch &&
                   rows->gr_get(w, h, x - 1, y) == rch &&
                   rows->gr_get(w, h, x, y - 1) == rch {
                    // printf("%q %q top left inside edge\n", x, y)
                    sides += 1
                }

                // Top right
                if rows->gr_get_default(w, h, x + 1, y - 1, rch) != rch &&
                   rows->gr_get(w, h, x + 1, y) == rch &&
                   rows->gr_get(w, h, x, y - 1) == rch {
                    // printf("%q %q top right inside edge\n", x, y)
                    sides += 1
                }

                // Outside edge?
                
                // Above and right
                if rows->gr_get(w, h, x, y - 1) != rch &&
                   rows->gr_get(w, h, x + 1, y) != rch {
                    // printf("%q %q above right outside edge\n", x, y)
                    sides += 1
                }

                // Below and right
                if rows->gr_get(w, h, x, y + 1) != rch &&
                   rows->gr_get(w, h, x + 1, y) != rch {
                    // printf("%q %q below right outside edge\n", x, y)
                    sides += 1
                }

                // Below and left
                if rows->gr_get(w, h, x, y + 1) != rch &&
                   rows->gr_get(w, h, x - 1, y) != rch {
                    // printf("%q %q below left outside edge\n", x, y)
                    sides += 1
                }

                // Above and left
                if rows->gr_get(w, h, x, y - 1) != rch &&
                   rows->gr_get(w, h, x - 1, y) != rch {
                    // printf("%q %q above left outside edge\n", x, y)
                    sides += 1
                }
            }
        }

        // printf("sides=%q\n", sides)
        // debug_break()

        // This is the _outline_ of the region.
        // We fill it with true (1) where it ought to be
        //
        // AAAA
        // ..AA
        //
        // Turns into
        // 
        // 111111
        // 100001
        // 111001
        // 001111
        //
        // Then we follow along the outline to count how many
        // sides there are. We start with one side, and every time
        // we turn we add a side until we reach back to
        // a point we already covered.
        //
        // Note that the outline contains diagonals too
        ol := aint()

        ww := w + 2
        hh := h + 2

        ol->aint_resize_fill(ww * hh, 0)

        // for y := 0; y < h; y += 1 {
        //     for x := 0; x < w; x += 1 {
        //         val := rows[x + y * w]

        //         if val != area_ch {
        //             continue
        //         }

        //         xx := x + 1
        //         yy := y + 1

        //         // Left
        //         if rows->gr_get(w, h, x - 1, y) != area_ch {
        //             ol[(xx - 1) + yy * ww] = 1
        //         }
 
        //         // Right
        //         if rows->gr_get(w, h, x + 1, y) != area_ch {
        //             ol[(xx + 1) + yy * ww] = 1
        //         }

        //         // Above
        //         if rows->gr_get(w, h, x, y - 1) != area_ch {
        //             ol[xx + (yy - 1) * ww] = 1
        //         }

        //         // Below
        //         if rows->gr_get(w, h, x, y + 1) != area_ch {
        //             ol[xx + (yy + 1) * ww] = 1
        //         }

        //         // Top left
        //         // if rows->gr_get(w, h, x - 1, y - 1) != area_ch {
        //         //     ol[(xx - 1) + (yy - 1) * ww] = 1
        //         // }

        //         // // Top right
        //         // if rows->gr_get(w, h, x + 1, y - 1) != area_ch {
        //         //     ol[(xx + 1) + (yy - 1) * ww] = 1
        //         // }

        //         // // Bottom left
        //         // if rows->gr_get(w, h, x - 1, y + 1) != area_ch {
        //         //     ol[(xx - 1) + (yy + 1) * ww] = 1
        //         // }

        //         // // Bottom right
        //         // if rows->gr_get(w, h, x + 1, y + 1) != area_ch {
        //         //     ol[(xx + 1) + (yy + 1) * ww] = 1
        //         // }
        //     }
        // }

        // printf("outline:\n")
        // print_aint_grid(ol, ww, hh)
        // debug_break()

        // sides := 0

        // while true {
        //     res := trace_one_outline_sides(ol, ww, hh)
        //     if res == 0 {
        //         break
        //     }
        //     sides += res
        // }

        d[area_ch] = sides
    }

    return d
}

regs := make_regions()

area_d := area(regs, w, h)

sides_d := sides(regs, w, h, area_d)

price := 0

foreach pkv in sides_d->dict_iter() {
    price += cast(pkv.value, int) * cast(area_d[pkv.key], int)
}

printf("%q\n", price)
