use import("util.tiny")

data := read_file("inputs/day16_test.txt")

lines := data->split_by_char('\n')
lines->astr_pop()

EMPTY :: 0
WALL  :: 1

struct V2 {
    x: int
    y: int
}

func v2_add(a: V2, b: V2): V2 {
    return new V2{a.x + b.x, a.y + b.y}
}

func v2_sub(a: V2, b: V2): V2 {
    return new V2{a.x - b.x, a.y - b.y}
}

struct World {
    w: int
    h: int
    rows: aint
    pos: V2
    end_pos: V2
}

func get_tile(w: World, x: int, y: int): int {
    if x < 0 || x >= w.w {
        return -1
    }

    if y < 0 || y >= w.h {
        return -1
    }

    return w.rows[x + y * w.w]
}

func parse_world(lines: astr): World {
    w := lines[0]->strlen()
    h := lines->astr_len()

    rows := aint()
    rows->aint_resize_fill(w * h, EMPTY)

    pos := new V2{-1, -1}
    end_pos := new V2{-1, -1}

    foreach line, y in lines {
        foreach ch, x in line {
            if ch == '#' {
                rows[x+y*w] = WALL
            } else if ch == 'S' {
                pos.x = x
                pos.y = y
            } else if ch == 'E' {
                end_pos.x = x
                end_pos.y = y 
            }
        }
    }

    return new World{
        .w = w,
        .h = h,
        .rows = rows,
        .pos = pos,
        .end_pos = end_pos,
    }
}

RIGHT :: 0
DOWN :: 1
LEFT :: 2
UP :: 3
DIR_COUNT :: 4

func delta_x(dir: int): int {
    if dir == RIGHT return 1
    else if dir == LEFT return -1
    else return 0
}

func delta_y(dir: int): int {
    if dir == DOWN return 1
    else if dir == UP return -1
    else return 0
}

use array("V2") as av2
use array("av2") as a_av2

lowest_score_paths := a_av2()

func store_scores(w: World, x: int, y: int, dir: int, score: int, pmin: aint, path_so_far: av2, lowest_score: int) {
    if w->get_tile(x, y) != EMPTY {
        // Not a valid path here
        return;
    }
 
    v := pmin[x + y * w.w]
    if v >= 0 && v < score {
        // This is the shortest path so far since we started at the end, don't overwrite it
        return;
    }

    path_so_far->av2_push(new V2{x, y})

    // printf("at %q %q, dir = %q score = %q\n", x, y, dir, score)

    // We must only store min scores for the end pos if we're facing left (opposite of right)
    done := false

    if x == w.end_pos.x && y == w.end_pos.y {
        if dir == DOWN {
            // Need to turn to face right
            score += 1000
        } else if dir == UP {
            score += 1000
        } else if dir == RIGHT {
            score += 2000
        }

        done = true
    }

    pmin[x + y * w.w] = score

    if done {
        if score <= lowest_score {
            path := av2()
            // Copy because path_so_far will get mutated (it is just one array)
            path->av2_copy(path_so_far)

            // Remember this as a lowest score path
            lowest_score_paths->a_av2_push(path)
        }

        return;
    }
 
    d0 := dir
    d1 := (dir + 1) % DIR_COUNT
    d2 := (dir + 2) % DIR_COUNT
    d3 := (dir + 3) % DIR_COUNT

    path_len := path_so_far->av2_len()

    store_scores(w, x + delta_x(d0), y + delta_y(d0), d0, score + 1, pmin, path_so_far, lowest_score)
    // Restore the path to prev size
    path_so_far->av2_resize(path_len)

    store_scores(w, x + delta_x(d1), y + delta_y(d1), d1, score + 1001, pmin, path_so_far, lowest_score)
    path_so_far->av2_resize(path_len)

    store_scores(w, x + delta_x(d2), y + delta_y(d2), d2, score + 2001, pmin, path_so_far, lowest_score)
    path_so_far->av2_resize(path_len)

    // Only 1000 because we can turn counterclockwise
    store_scores(w, x + delta_x(d3), y + delta_y(d3), d3, score + 1001, pmin, path_so_far, lowest_score)

    // Pop off the position we pushed as well before returning
    path_so_far->av2_resize(path_len - 1)
}

w := parse_world(lines)
// printf("%q\n", w)

// Swap pos and end pos so we can work backwards
epos := w.end_pos
spos := w.pos

printf("spos=%q epos=%q\n", spos, epos)

w.end_pos = spos
w.pos = epos

pmin := aint()
pmin->aint_resize_fill(w.w * w.h, -1)

path_so_far := av2()

store_scores(w, w.pos.x, w.pos.y, LEFT, 0, pmin, path_so_far, -1)
store_scores(w, w.pos.x, w.pos.y, DOWN, 0, pmin, path_so_far, -1)
store_scores(w, w.pos.x, w.pos.y, UP, 0, pmin, path_so_far, -1)
store_scores(w, w.pos.x, w.pos.y, DOWN, 0, pmin, path_so_far, -1)

best_score := pmin[spos.x + spos.y * w.w]

printf("score=%q\n", best_score)

print_aint_grid_w(pmin, w.w, w.h, 8)

// Run again this time keeping track of paths
pmin->aint_resize_fill(w.w * w.h, -1)
store_scores(w, w.pos.x, w.pos.y, LEFT, 0, pmin, path_so_far, best_score)

pmin->aint_resize_fill(w.w * w.h, -1)
store_scores(w, w.pos.x, w.pos.y, DOWN, 0, pmin, path_so_far, best_score)

pmin->aint_resize_fill(w.w * w.h, -1)
store_scores(w, w.pos.x, w.pos.y, UP, 0, pmin, path_so_far, best_score)

pmin->aint_resize_fill(w.w * w.h, -1)
store_scores(w, w.pos.x, w.pos.y, DOWN, 0, pmin, path_so_far, best_score)

printf("path count=%q\n", lowest_score_paths->a_av2_len())

marked := abool()
marked->abool_resize_fill(w.w * w.h, false)

foreach a, i in lowest_score_paths {
    printf("path %i\n", i)
    foreach c in a {
        printf("%q\n", c)
        marked[c.x + c.y * w.w] = true
    }
}

print_abool_grid(marked, w.w, w.h)

mark_count := 0

for y := 0; y < w.h; y += 1 {
    for x := 0; x < w.w; x += 1 {
        if marked[x + y * w.w] {
            mark_count += 1
        }
    }
}
printf("%q\n", mark_count)
