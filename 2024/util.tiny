use array("str") as astr
use array("int") as aint
use array("bool") as abool

func split_by_char(input: str, ch: int): astr {
    // Necessary because mutating arguments doesn't work haha
    s := input
    parts := astr()

    while true {
        end_of_part_pos := strchr(s, ch)
        part := substr(s, 0, end_of_part_pos)

        astr_push(parts, part)

        if end_of_part_pos == -1 {
            break
        }
        
        s = substr(s, end_of_part_pos + 1, -1)
    }

    return parts
}

func is_digit(ch: int): bool {
    return ch >= '0' && ch <= '9'
}

func is_digit_str(s: str): bool {
    for i := 0; i < s->strlen(); i += 1 {
        if !is_digit(s[i]) return false
    }

    return true
}

use result("aint") as r_aint

// Unwraps and indexes into r_aint
func r_aint_get_index(r: r_aint, idx: int): int {
    return r_aint_unwrap(r)[idx]
}

func r_aint_len(r: r_aint): int {
    return r_aint_unwrap(r)->aint_len()
}

func strs_to_ints(a: astr): r_aint {
    b := aint()
    aint_resize(b, a->astr_len())

    for i := 0; i < a->astr_len(); i += 1 {
        if !is_digit_str(a[i]) {
            return r_aint_err("string is not a valid integer")
        }

        b[i] = str_to_int(a[i])
    }

    return r_aint_ok(b)
}

func aint_has(a: aint, v: int): bool {
    for i := 0; i < a->aint_len(); i += 1 {
        if a[i] == v {
            return true
        }
    }

    return false
}

func astr_has(a: astr, v: str): bool {
    for i := 0; i < a->astr_len(); i += 1 {
        if a[i] == v {
            return true
        }
    }

    return false
}


struct DictIter {
    d: dict
    keys: array_any
}

struct DictIterKeyValue {
    key: any
    value: any
}

func dict_iter(d: dict): DictIter {
    return new DictIter{d, dict_keys(d)}
}

func DictIter_get_index(iter: DictIter, i: int): DictIterKeyValue {
    key := iter.keys[i]
    return new DictIterKeyValue{key, iter.d->dict_get(key)}
}

func DictIter_len(iter: DictIter): int {
    return iter.keys->array_any_len()
}

func print_aint_grid(ag: aint, w: int, h: int) {
    for y := 0; y < h; y += 1 {
        for x := 0; x < w; x += 1 {
            printf("%i ", ag[x + y * w])
        }
        printf("\n")
    }
}

func print_aint_grid_w(ag: aint, w: int, h: int, ch_w: int) {
    for y := 0; y < h; y += 1 {
        for x := 0; x < w; x += 1 {
            digits := 1
            
            v := ag[x + y * w]

            if v < 0 {
                digits += 1
                v *= -1
            }

            while v >= 10 {
                v /= 10
                digits += 1
            }

            while digits < ch_w {
                digits += 1
                printf(" ")
            }

            printf("%i", ag[x + y * w])
        }
        printf("\n")
    }
}

func print_aint_grid_single_digit(ag: aint, w: int, h: int) {
    for y := 0; y < h; y += 1 {
        for x := 0; x < w; x += 1 {
            printf("%i", ag[x + y * w])
        }
        printf("\n")
    }
}

func print_abool_grid(ag: abool, w: int, h: int) {
    for y := 0; y < h; y += 1 {
        for x := 0; x < w; x += 1 {
            printf("%i", if ag[x + y * w] 1 else 0)
        }
        printf("\n")
    }
}

func assert(v: bool, msg: str) {
    if !v {
        printf("%s\n", msg)
        exit(1)
    }
}

func abs(v: int): int {
    return if v < 0 (-v) else v
}
