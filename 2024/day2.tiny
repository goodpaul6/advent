use array("str") as astr
use array("int") as aint

func split_by_char(input: str, ch: int): astr {
    // Necessary because mutating arguments doesn't work haha
    s := input
    parts := astr()

    while true {
        end_of_part_pos := strchr(s, ch)
        part := substr(s, 0, end_of_part_pos)

        astr_push(parts, part)

        if end_of_part_pos == -1 {
            break
        }
        
        s = substr(s, end_of_part_pos + 1, -1)
    }

    return parts
}

data := read_file("inputs/day2.txt")

lines := split_by_char(data, '\n')

safe_count := 0

for i := 0; i < astr_len(lines); i += 1 {
    line := lines[i]

    num_strs := split_by_char(line, ' ')
    
    if astr_len(num_strs) == 1 {
        break
    }

    printf("%q\n", num_strs)

    sign := 0
    safe := true

    prev_value := str_to_int(num_strs[0])

    for j := 1; j < astr_len(num_strs); j += 1 {
        value := str_to_int(num_strs[j])
        printf("prev_value=%q\n", prev_value)
        printf("value=%q\n", value)

        if sign == 0 {
            if prev_value < value {
                sign = 1
            } else {
                sign = -1
            }
        } else if sign < 0 {
            if prev_value < value {
                printf("nondecreasing\n")

                safe = false
                break
            }
        } else {
            if prev_value > value {
                printf("nonincreasing\n")

                safe = false
                break
            }
        }

        diff := value - prev_value
        if diff < 0 {
            diff *= -1
        }

        if diff < 1 || diff > 3 {
            safe = false
            break
        }

        prev_value = value
    }

    if safe {
        safe_count += 1
    }
}

printf("safe_reports=%q\n", safe_count)
