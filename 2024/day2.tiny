use array("str") as astr
use array("int") as aint

func split_by_char(input: str, ch: int): astr {
    // Necessary because mutating arguments doesn't work haha
    s := input
    parts := astr()

    while true {
        end_of_part_pos := strchr(s, ch)
        part := substr(s, 0, end_of_part_pos)

        astr_push(parts, part)

        if end_of_part_pos == -1 {
            break
        }
        
        s = substr(s, end_of_part_pos + 1, -1)
    }

    return parts
}

data := read_file("inputs/day2.txt")

lines := split_by_char(data, '\n')

safe_count := 0

func is_safe(nums: aint, skip_index: int): bool {
    sign := 0
    start_index := 0
    
    if skip_index == 0 {
        start_index = 1
    }

    prev_value := nums[start_index]

    for j := start_index + 1; j < aint_len(nums); j += 1 {
        if j == skip_index {
            continue    
        } 
        
        value := nums[j]

        if sign == 0 {
            if prev_value < value {
                sign = 1
            } else {
                sign = -1
            }
        } else if sign < 0 {
            if prev_value < value {
                return false
            }
        } else {
            if prev_value > value {
                return false
            }
        }

        diff := value - prev_value
        if diff < 0 {
            diff *= -1
        }

        if diff < 1 || diff > 3 {
            return false
        }

        prev_value = value
    }

    return true
}

func is_safe_with_at_most_one_removed(nums: aint): bool {
    if is_safe(nums, -1) {
        return true
    }

    for i := 0; i < aint_len(nums); i += 1 {
        if is_safe(nums, i) {
            return true
        } 
    }

    return false
}

for i := 0; i < astr_len(lines); i += 1 {
    line := lines[i]

    num_strs := split_by_char(line, ' ')
    
    if astr_len(num_strs) < 2 {
        break
    }

    nums := aint()
    aint_resize(nums, astr_len(num_strs))

    for j := 0; j < astr_len(num_strs); j += 1 {
        nums[j] = str_to_int(num_strs[j])
    }

    if is_safe_with_at_most_one_removed(nums) {
        safe_count += 1
    } 
}

printf("safe_reports=%q\n", safe_count)
